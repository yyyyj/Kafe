#include <iostream>
#include <vector>
#include <string>

#include "kafe/kafe.hpp"
#include "tests/tests.hpp"
#include <clipp.hpp>

int getDebugMode(bool verbose, bool interactive)
{
    int debug_mode = 0;
    if (verbose)
        { debug_mode |= kafe::VM::FLAG_BASIC_DEBUG; }
    if (interactive)
        { debug_mode |= kafe::VM::FLAG_INTERACTIVE; }

    return debug_mode;
}

int main(int argc, char* argv[])
{
    using namespace clipp;

    enum class mode {help, build, exec, tests};
    mode selected;
    std::string input_file = "";
    std::string output_bytecode_file = "";
    bool optimize_flag = false;
    bool display_ast_flag = false;
    std::vector<std::string> infiles;
    bool verbose = false;
    bool interactive = false;
    std::vector<std::string> wrong;

    auto cli = (
                command("help").set(selected, mode::help)
                | (command("build").set(selected, mode::build),
                    values("file", infiles)
                        .if_missing([]{ std::cerr << "You need to provide at least one filename !" << std::endl; })
                    ,
                    required("-o", "--out") & value("outfile", output_bytecode_file)
                        .if_missing([]{ std::cerr << "You need to provide the name of the output file !" << std::endl; })
                    ,
                    (option("-O", "--optimize").set(optimize_flag) % "Optimize the generated bytecode")
                    ,
                    (option("-a", "--ast").set(display_ast_flag)   % "Save the generated AST to <outfile>.ast")
                 )
                | (
                   (command("exec").set(selected, mode::exec)
                       ,
                        value("file", input_file)
                            .if_missing([]{ std::cerr << "You need to provide the name of the file to execute !" << std::endl; })
                     )
                    | (command("tests").set(selected, mode::tests))
                    ,
                    (option("-v", "--verbose").set(verbose) % "Print detailed report")
                    ,
                    (option("-i", "--interactive").set(interactive) % "Start a CLI to be able to execute a file instruction per instruction")
                ),
                any_other(wrong)
                );

    auto fmt = doc_formatting{}
        .start_column(8)          // column where usage lines and documentation starts
        .doc_column(36)           // parameter docstring start col
        .indent_size(2)           // indent of documentation lines for children of a documented group
        .split_alternatives(true) // split usage into several lines for large alternatives
    ;

    if (parse(argc, argv, cli) && wrong.empty())
    {
        switch (selected)
        {
        default:
        case mode::help:
            std::cerr << make_man_page(cli, argv[0], fmt).append_section("LICENSE", "        Mozilla Public License 2.0")
                      << std::endl;
            return 0;

        case mode::build:
            kafe::generateBytecode(infiles, output_bytecode_file, optimize_flag, display_ast_flag);
            break;

        case mode::exec:
        {
            kafe::VM vm;
            vm.setMode(getDebugMode(verbose, interactive));
            vm.execFromFile(input_file);
            break;
        }

        case mode::tests:
            std::cout << "antlr" << std::endl;
            kafe::testANTLR();
            std::cout << "end" << std::endl;
            return start_tests(getDebugMode(verbose, interactive));
        }
    }
    else
    {
        for (const auto& arg : wrong)
            std::cerr << "'" << arg << "'" << " ins't a valid argument" << std::endl;
        std::cerr << "Usage:" << std::endl
                  << usage_lines(cli, argv[0], fmt) << std::endl
                  << "Options:" << std::endl
                  << documentation(cli, fmt) << std::endl
                  ;
    }

    return 0;
}
